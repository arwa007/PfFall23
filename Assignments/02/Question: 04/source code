#include <stdio.h>
#include <stdbool.h>

#define N 5
#define M 5

typedef struct {
    int x, y;
} Point;

char maze[N][M] = {
    {'S', 'O', 'O', 'W', 'W'},
    {'O', 'W', 'O', 'O', 'W'},
    {'O', 'O', 'O', 'W', 'O'},
    {'W', 'W', 'O', 'W', 'O'},
    {'W', 'W', 'O', 'E', 'W'}
};

bool isSafe(int x, int y) {
    return (x >= 0 && x < N && y >= 0 && y < M && maze[x][y] != 'W');
}

bool solveMaze() {
    Point stack[N * M];
    int top = -1;

    // Find the starting point ('S')
    int startX, startY;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (maze[i][j] == 'S') {
                startX = i;
                startY = j;
                break;
            }
        }
    }

    Point start = {startX, startY};
    stack[++top] = start;

    while (top != -1) {
        Point current = stack[top--];
        int x = current.x, y = current.y;

        if (maze[x][y] == 'E') {
            return true; // Reached the exit
        }

        if (isSafe(x, y)) {
            maze[x][y] = '*'; // Mark the path

            // Move in all four directions (up, down, left, right)
            Point directions[] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
            for (int i = 0; i < 4; i++) {
                int newX = x + directions[i].x;
                int newY = y + directions[i].y;

                Point next = {newX, newY};
                if (isSafe(newX, newY)) {
                    stack[++top] = next;
                }
            }
        }
    }

    return false; // No path found
}

int main() {
    if (solveMaze()) {
        printf("Path found!\n");

        // Print the solved maze with the path
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                printf("%c ", maze[i][j]);
            }
            printf("\n");
        }
    } else {
        printf("No path found.\n");
    }

    return 0;
}
